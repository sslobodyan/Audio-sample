<!DOCTYPE HTML>
<html>
<head><meta charset="UTF-8"><title>Data GUI</title></head>
<body style="font-family: Lekton; font-size: 11pt">
	<h3>Graphical display of recorded data from Maple Mini</h3>
	<table><tr>
	<td width="50px"></td>
	<!--td width="150px"><div id="xycoordinates" style="visibility:hidden"></div></td-->
	<!--td width="200px"><div id="td_selection" style="visibility:hidden"></div></td-->
	<!--td><button type="button" onclick="ClearSelection()">Clear selection</button></td-->
	<!--td width="150px"><button type="button" onclick="ZoomSelection()">Zoom selection</button></td-->
	<!--td width="200px"><div id="dindex_select""></div></td-->
	<!--td width="200px"><div id="range_y""></div></td-->
	<td width="100px"><button type="button" onclick="ZoomIn()">Zoom in</button></td>
	<td width="100px"><button type="button" onclick="ZoomOut()">Zoom out</button></td>
	<td width="200px"><button type="button" onclick="ZoomReset()">Zoom reset</button></td>
	<td width="350px"><input type="file" id="fileinput" title="Select file..."</input></td>
	<td><button type="button" onclick="Audio_SamplePlayer(-1)">Play white noise</button></td>
	<td> Sampling frequency: </td>
	<td><input type="number" id="sampleRate" style="width:70px" min="0" max="48000" value="26000" step="1000"> Hz</td>
	</tr></table>
	<!-- place holder for canvas -->
	<div style="position:absolute;left:30px;top:100px">
	<script type="text/javascript">
		/******************************************************************************/
		// default canvas sizes
		var canvasWidth = 1200;
		var canvasHeigth = 600;
		var canvas2Heigth = 300;
		// labels
		var fSize = 10;
		var lineWidthG = 1;
		var textColor = 'rgba(100,100,100,1)';
		var gridColor = 'rgba(0,0,0,0.1)'; 
		var bgColor = 'rgba(255,255,255,1)';
		var plotColor = ['#FF0000', '#00CC00', '#0000FF', '#FF8800', '#00CC88', '#8800FF', '#CCCC00', '#0088CC', '#CC00CC'];
		var canvas2_img;
		/******************************************************************************/
		// add canvas and data placeholder 
		document.write("<canvas id='myCanvas' width="+canvasWidth+" height="+canvasHeigth+" style='z-index: 1; box-shadow: 0px 0px 10px 15px #D5D5D5'" +
		" onmousemove='ShowCoordinates(event)' onmouseup='mouse_up(event)' onclick='ZoomUpdate()'></canvas>");
		document.write("<canvas id='canvas_2' width="+(canvasWidth-300)+" height="+canvas2Heigth+
		" style='z-index: 2; position:absolute;left:40px;top:30px;border:1px solid;box-shadow: inset 0px 0px 10px 5px #D5D5D5'" +
		" onmousemove='ShowCoordinates(event)' onmousedown='mouse_down(event)' onmouseup='mouse_up(event)'></canvas>");
		// add listener
		document.getElementById('fileinput').addEventListener('change', readSingleFile, false);
		document.getElementById('fileinput').value = '';
		/******************************************************************************/
		var totalRange = 0x1000; // max ADC value
		var data_array = [];//new Array(12000);
		var alen = data_array.length;
		var dlen = 0;	// data length
		var data_is_signed = false;
		/******************************************************************************/
		/**********************************************/
		// parse here the data read from file
		/**********************************************/
		function ParseData(dat)
		{	// convert the read data into an array
			var datlen = dat.length;
			// get sequence length from user
			do { seqlen = prompt("Got "+datlen+" samples.\n\nPlease enter the sequence length:\n1 - for 2 channels\n2 - for 4 channels\n4 - for 8 channels)\n", "2");
			} while ( seqlen!='1' && seqlen!='2' && seqlen!='4' && seqlen!="Cancel");

			seq_len = parseInt(seqlen);
			var ch0 = [];//new Array();
			var ch1 = [];//new Array();
			if ( seq_len>1 ) {
				var ch2 = [];//new Array();
				var ch3 = [];//new Array();
				if ( seq_len>2 ) {
					var ch4 = [];//new Array();
					var ch5 = [];//new Array();
					var ch6 = [];//new Array();
					var ch7 = [];//new Array();
					var arr = [ch0,ch1,ch2,ch3,ch4,ch5,ch6,ch7];
				} else
					var arr = [ch0,ch1,ch2,ch3];//,ch4,ch5,ch6,ch7];
			} else
				var arr = [ch0,ch1];//,ch2,ch3,ch4,ch5,ch6,ch7];
			
			for (j = 0, i = 0; i<datlen; j++) {
				arr[0][j] = dat[i++];
				arr[1][j] = dat[i++];
				if ( seq_len>1 ) {
					arr[2][j] = dat[i++];
					arr[3][j] = dat[i++];
					if ( seq_len>2 ) {
						arr[4][j] = dat[i++];
						arr[5][j] = dat[i++];
						arr[6][j] = dat[i++];
						arr[7][j] = dat[i++];
					}
				}
			}
			alen = arr.length;
			dlen = arr[0].length;
			dindex.end = dlen;
			selection = [0,0,0,0]; xd = -1;
			//alert("array length: " + alen + ", data length: " + dlen);
			data_array = arr;
			// draw the channel selection table
			prepUI();
		}
		/******************************************************************************/
		function readSingleFile(evt) {
			//Retrieve the first (and only!) File from the FileList object
			var f = evt.target.files[0]; 
			if (f) {
				var r = new FileReader();
				r.onload = function(e) {
					// get sign information from user
					do { data_is_signed = prompt("Please specify if data is signed:\ns - for signed,\nu - for unsigned\n", "s");
					} while ( data_is_signed!='s' && data_is_signed!='u' && data_is_signed!="Cancel");
					// convert the data to 16 bit numbers array
					if ( data_is_signed )
						var dat = new Int16Array(e.target.result);
					else
						var dat = new Uint16Array(e.target.result);
					//alert( "Got the file: \n"+"name: " + f.name + ",\n"+"type: " + f.type + ",\n"+"size: " + f.size + " bytes, " + dat.length + " samples,\n"+"starts with: " + dat[0]);
					ParseData(dat);
				}
				//r.readAsText(f);
				r.readAsArrayBuffer(f);
			} else {
				alert("Failed to load file");
			}
		}
		/**********************************************/
		// display related variables
		/**********************************************/
		var selection = [0,0,0,0];	// coordinates of selected area
		//var data_head;
		var xd = -1;
		var yd = -1;
		var m_up = false;
		var m_down = false;
		// selected data indexes
		var dindex = {start:0, end:dlen};
		var last_coord = {x:0, y:0};
		var canvas1 = document.getElementById("myCanvas");
		var canvas2 = document.getElementById("canvas_2");
		var ctx1 = canvas1.getContext("2d");
		var ctx2 = canvas2.getContext("2d");
		var hei = canvas2.height;
		var wid = canvas2.width;
		/******************************************************************************/
		// display related functions
		/******************************************************************************/
		function prepUI()
		{
			var eltern = canvas1.parentElement;
			if ( document.getElementById("dataForm") )	document.getElementById("dataForm").remove();
			// create channel selection form
			elem = "<div id='dataForm' style='z-index: 3; position:absolute;left:"+(canvasWidth-250)+"px;top:30px;width:220px'></div>";
			eltern.insertAdjacentHTML("BeforeEnd", elem);
			frm = document.getElementById("dataForm");
			elem = "<table style='border:1px solid #A5CFE9' rules='all'><tbody id='dataTable'></tbody></table>";
			frm.insertAdjacentHTML("BeforeEnd", elem);
			dtable = document.getElementById("dataTable");
			elem = "<tr id='tpar' style='background-color: #D5EBF9'><th>Index</th><th id='d_index' width='70px'></th><th id='hang' width='50px'></th></tr>";
			dtable.insertAdjacentHTML("BeforeEnd", elem);
			for (var i=1; i<=alen; i++) {
				elem = "<tr><td onclick='GUI_Draw()'><input type='checkbox' id='checkbox"+i+"' name='channel"+(i-1)+"' checked></input></td></tr>";
				dtable.insertAdjacentHTML("BeforeEnd", elem);	// first column
				var inpId = document.getElementById("checkbox"+i)
				elem = "<label for='checkbox" + i + "' style='color:" + plotColor[i-1] + "'> Ch"+(i-1)+"</label>";
				inpId.parentElement.insertAdjacentHTML("BeforeEnd", elem);
				elem = "<td id='myData"+i+"' align='center'></td>";	// second column
				elem += "<td id='hang"+i+"' align='left'><button type='button' onclick='Audio_SamplePlayer("+(i-1)+")'>Play audio</button></td>";	// third column
				inpId.parentElement.parentElement.insertAdjacentHTML("BeforeEnd", elem);
			}
			ZoomReset();
		}
		/**********************************************/
		function ShowSelection() {
			// draw here the transparent rectangular
			GUI_Restore();
			var sel_x = last_coord.x;
			if ( sel_x<0 )		sel_x = 0;
			if ( sel_x>wid )	sel_x = wid;
			ctx2.strokeRect(selection[0],0,sel_x-selection[0],hei);
		}
		/**********************************************/
		function ShowMarker() {
			// update channel values
			var elem = document.getElementById("d_index");
			// refresh parameter values according to selected coordinate
			if ( elem && last_coord.x>=0 && last_coord.x<=wid ) {
				var d_spacing = (dindex.end - dindex.start)/wid;
				for (var j=0; j<alen; j++) {
					if ( document.getElementById("checkbox"+(j+1)).checked ) {
						var data_index = dindex.start + Math.floor(last_coord.x*d_spacing);
						elem.innerHTML = data_index;
						document.getElementById("myData"+(j+1)).innerHTML =  data_array[j][data_index];
					} else {
						document.getElementById("myData"+(j+1)).innerHTML =  "";
					}
				}
				//alert("ShowMarker: before restore");
				GUI_Restore();
				//alert("ShowMarker: after restore");
				// draw marker
				ctx2.moveTo(last_coord.x,0);
				ctx2.lineTo(last_coord.x,hei);
				ctx2.stroke();
				//alert("ShowMarker: after stroke");
			}
		}
		/**********************************************/
		function ShowCoordinates(e)
		{	// get coordinates
			x = e.clientX-60;	//	var x = e.clientX-30;
			y = e.clientY-130;
			last_coord.x = x;	//	var x = e.clientX-30;
			last_coord.y = y;
			// check mouse up or down event
			if ( m_down==true ) {
				m_down = false;
				xd = x; yd = y;
				selection = [xd,yd,0,0];
			}
			if ( m_up==true ) {
				m_up = false;
				if ( x<0 )		x = 0;
				if ( x>wid )	x = wid;
				if ( xd>0 && Math.abs(x-selection[0])>25 ) {
					selection[2] = x; selection[3] = last_coord.y;
					ZoomSelection();
				}
				xd = -1; selection = [0,0,0,0]; return;
			}
			// update GUI
			if (xd>0)	ShowSelection();
			else		ShowMarker();
		}
		/**********************************************/
		function mouse_down(e) {
			m_down = true;
			ShowCoordinates(e);
		}
		/**********************************************/
		function mouse_up(e) {
			m_up = true;
			ShowCoordinates(e);
		}
		/**********************************************/
		function ZoomUpdate() {
			GUI_Draw();
			selection = [0,0,0,0];
		}
		/**********************************************/
		function ZoomSelection() {
			if ( selection[0]==0 && selection[2]==0 )	return;
			xmin = Math.min(selection[0],selection[2]);
			xmax = Math.max(selection[0],selection[2]);
			// transpose the GUI selection coordinates to array indexes and amplitude
			var d_len = dindex.end - dindex.start;
			dindex.end = dindex.start + Math.round(xmax*d_len/wid);
			dindex.start = dindex.start + Math.round(xmin*d_len/wid);
			ZoomUpdate();
		}
		/**********************************************/
		function ZoomIn() {
			// transpose the GUI selection coordinates to array indexes and amplitude
			var d_len = dindex.end - dindex.start;
			//if ( d_len<100 ) return;  
			dindex.start = dindex.start + Math.round(d_len/4);
			dindex.end = dindex.end - Math.round(d_len/4);
			d_len = dindex.end - dindex.start;
			ZoomUpdate();
		}
		/**********************************************/
		function ZoomOut() {
			// transpose the GUI selection coordinates to array indexes and amplitude
			var d_len = dindex.end - dindex.start;
			dindex.end = dindex.end + Math.round(d_len/2);
			if ( dindex.end>dlen ) dindex.end = dlen;
			dindex.start = dindex.start - Math.round(d_len/2);
			if ( dindex.start<0 ) dindex.start = 0;
			ZoomUpdate();
		}
		/**********************************************/
		function ZoomReset() {
			// transpose the GUI selection coordinates to array indexes and amplitude
			dindex.start = 0;
			dindex.end = dlen;
			ZoomUpdate();
		}
		/**********************************************/
		function Data_GetRangeY() {
			var ymin = 0x10000;
			var ymax = 1;
			var dend = dindex.end;	if ( dindex.end<dlen ) dend += 1;
			for (var j=0; j<alen; j++)
			{
				var chckId = document.getElementById("checkbox"+(j+1));
				if ( chckId && chckId.checked )
				{// plot only checked plots. get min and max values
					for (var i=dindex.start; i<dend; i++)
					{
						var dat = data_array[j][i];	//*1.0;	// make float
						if ( dat<ymin ) ymin = dat;	// get minimum value
						if ( dat>ymax ) ymax = dat;	// get maximum value
					}
				}
			}
			//document.getElementById("range_y").innerHTML = "ymax: "+ymax+", ymin: "+ymin;
			return {ymin,ymax};
		}
		/**********************************************/
		function DrawLabels(spacH, spacV)
		{
			var posY = canvas2.offsetTop + hei;
			//alert("drawing x labels at posy = " + posY + ", spacH = " + spacH);
			// set horizontal grid step
			var d_len = dindex.end - dindex.start;
			var st = Math.floor(d_len/10).toString();
			if (st[0]>=5)	step = 5*Math.pow(10,st.length-1);
			else if (st[0]>=2)	step = 2*Math.pow(10,st.length-1);
			else step = Math.pow(10,st.length-1);
			ctx1.fillStyle = "black";
			ctx2.lineWidth = lineWidthG;
			ctx2.strokeStyle = gridColor;
			// horizontal, x-axis
			for(var i=0; i<=d_len; i++) {
				if ( ((dindex.start+i)%step)==0 ) {	// draw only one value each step
					temp = i*spacH;
					ctx1.fillText( Math.floor(dindex.start+i), 40+temp-10, posY+20);	// offset of 30 due to canvas2 left position
					// vertical grid lines
					ctx2.moveTo(temp,0);
					ctx2.lineTo(temp,hei);
				}
			}
			// vertical, y-axis labels
			var gr = Data_GetRangeY();
			var posX = canvas2.offsetLeft - 30;
			ctx1.fillText( Math.floor(gr.ymax), posX, hei/20 + canvas2.offsetTop); // top grid label
			ctx1.fillText( Math.floor((gr.ymax+gr.ymin)/2), posX, hei/2 + canvas2.offsetTop); // middle grid label
			ctx1.fillText( Math.floor(gr.ymin), posX, hei - (hei/20) + canvas2.offsetTop); // bottom grid label
			// horizontal grid lines
			ctx2.moveTo(0,(hei/20));	ctx2.lineTo(dlen,(hei/20)); // top grid line
			ctx2.moveTo(0,(hei/2));		ctx2.lineTo(dlen,hei/2); // middle grid line
			ctx2.moveTo(0,hei - (hei/20));	ctx2.lineTo(dlen,hei - (hei/20)); // bottom grid line
			ctx1.stroke();
			ctx2.stroke();
		}
		/**********************************************/
		function GUI_Draw()
		{
			var d_len = dindex.end - dindex.start;
			var spacingHorizontal = wid/d_len;
			var gr = Data_GetRangeY();
			totalRange = (gr.ymax-gr.ymin);
			var verticalCoefficient = 0.9*hei/totalRange;
			//alert("totalRange: "+totalRange+", verticalCoefficient: "+verticalCoefficient);

			canvas1.width = canvas1.width;	// reset canvas1
			canvas2.width = canvas2.width;	// reset canvas2
			
			DrawLabels(spacingHorizontal, verticalCoefficient);
			//alert("GUI_Draw: d_len: " + d_len);
			for (var j=0; j<alen; j++)
			{
				// actualize the last values in the table
				var ldataId = document.getElementById("myData"+(j+1));
				//alert("DrawLabels: j = "+j);
				ldataId.innerHTML = data_array[j][dindex.end-1];
				// check check-box status
				var elemid = document.getElementById("checkbox"+(j+1));
				mov = elemid.checked;
				if ( mov )	// plot data only if check-box is checked
				{
					//alert("checkbox " + (j+1) + " checked!");
					ctx2.beginPath();
					ctx2.strokeStyle = plotColor[j];
					ctx2.fillStyle = plotColor[j];
					for (var i=0; i<d_len; i++)
					{
						var dat = data_array[j][dindex.start+i];
						if ( dat=='' ) continue;
						//xp = Math.ceil(i*spacingHorizontal);
						var xp = i*spacingHorizontal;
						var yp = 0.95*hei - (dat-gr.ymin)*verticalCoefficient;
						ctx2.lineTo(xp, yp);
					}
					// draw last point if not last data index
					if ( i<dlen )	ctx2.lineTo(i*spacingHorizontal, (0.95*hei - ((data_array[j][dindex.start+i])-gr.ymin)*verticalCoefficient));
					ctx2.stroke();
					ctx2.closePath();
				}
			}
			// save image
			canvas2_img = new Image();
			canvas2_img.src = canvas2.toDataURL();
		}
		/**********************************************/
		function GUI_Restore() {
			canvas2.width = canvas2.width;	// reset plot
			if ( canvas2_img )	ctx2.drawImage(canvas2_img,0,0);
		}
		/**********************************************/
		function Audio_SamplePlayer(ch) {
			var audioCtx = new (window.AudioContext || window.webkitAudioContext)();
			var channels = 1; // Mono
			// Create an empty mono buffer at the default sample rate
			mySampleRate = document.getElementById("sampleRate").value;
			var frameCount = dindex.end-dindex.start;
			if (frameCount<=0) frameCount = mySampleRate;
			var myArrayBuffer = audioCtx.createBuffer(channels, frameCount, mySampleRate);
			// Fill the buffer with data
			var nowBuffering = myArrayBuffer.getChannelData(0);
			if ( ch<0 ) {	// generate white noise
				for (var i = 0; i < mySampleRate; i++) {
					// audio needs to be in [-1.0; 1.0]
					nowBuffering[i] = (Math.random()*2 - 1);
				}
			} else { // generate audio
				for (var i = 0; i < frameCount; i++) {
					// audio needs to be in [-1.0; 1.0]
					nowBuffering[i] = (data_array[ch][dindex.start+i]/32768);
				}
			}
			// Get an AudioBufferSourceNode. This is the AudioNode to use when we want to play an AudioBuffer
			var source = audioCtx.createBufferSource();
			// set the buffer in the AudioBufferSourceNode
			source.buffer = myArrayBuffer;
			// connect the AudioBufferSourceNode to the destination so we can hear the sound
			source.connect(audioCtx.destination);
			// start the source playing
			source.start();
		}
	</script>
	</div>
</body>
</html>
