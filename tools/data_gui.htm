<!DOCTYPE HTML>
<html>
    <head><meta charset="UTF-8"><title>Data GUI</title></head>
    <body style="font-family: Lekton; font-size: 11pt">
		<h3>Graphical display of recorded data from Maple Mini</h3>
		<table><tr>
		<td width="50px"></td>
		<!--td width="150px"><div id="xycoordinates" style="visibility:hidden"></div></td-->
		<!--td width="200px"><div id="td_selection" style="visibility:hidden"></div></td-->
		<!--td><button type="button" onclick="ClearSelection()">Clear selection</button></td-->
		<td width="150px"><button type="button" onclick="ZoomSelection()">Zoom selection</button></td>
		<!--td width="200px"><div id="dindex_select" style="visibility:hidden"></div></td-->
		<td width="100px"><button type="button" onclick="ZoomIn()">Zoom in</button></td>
		<td width="200px"><button type="button" onclick="ZoomOut()">Zoom out</button></td>
		<td><div id="div_file_input" style="margin-left: 20px;">
			<input type="file" id="fileinput" title="Select file..."</input>
		</div></td>
		</tr></table>
		<!-- place holder for canvas -->
		<div style="position:absolute;left:30px;top:100px">
		<script type="text/javascript">
			/******************************************************************************/
			// default canvas sizes
			var canvasWidth = 1200;
			var canvasHeigth = 600;
			// labels
			var fSize = 10;
			var lineWidthG = 1;
			var textColor = 'rgba(100,100,100,1)';
			var gridColor = 'rgba(0,0,0,0.1)'; 
			var bgColor = 'rgba(255,255,255,1)';
			var plotColor = ['#FF0000', '#00CC00', '#0000FF', '#FF8800', '#00CC88', '#8800FF', '#CCCC00', '#0088CC', '#CC00CC'];
			/******************************************************************************/
			// add canvas and data placeholder 
			document.write("<canvas id='myCanvas' width="+canvasWidth+" height="+canvasHeigth+" style='z-index: 1; box-shadow: 0px 0px 10px 15px #D5D5D5'" +
			" onmousemove='ShowCoordinates(event)' onmouseup='mouse_up(event)' onclick='ClearSelection()'></canvas>");
			document.write("<canvas id='canvas_2' width="+(canvasWidth-300)+" height="+(canvasHeigth-100)+
			" style='z-index: 2; position:absolute;left:30px;top:30px;border:1px solid;box-shadow: inset 0px 0px 10px 5px #D5D5D5'" +
			" onmousemove='ShowCoordinates(event)' onmouseout='cnvs_clearCoordinates()' onmousedown='mouse_down(event)' onmouseup='mouse_up(event)'></canvas>");
/*			document.write("<div id='container'><textarea id='post_reply' rows='4' cols='100' placeholder='Content goes here'"+
				" style='position:absolute;left:0px;top:"+canvasHeigth+"px; width:"+canvasWidth+"px; height:400px;'></textarea></div>");*/
			// add listener
			document.getElementById('fileinput').addEventListener('change', readSingleFile, false);
			document.getElementById('fileinput').value = '';
			/******************************************************************************/
			var totalRange = 0x1000; // max ADC value
			var data_array = [];//new Array(12000);
			var alen = data_array.length;
			var dlen = 0;	// data length
			var data_is_signed = false;
			/******************************************************************************/
			/**********************************************/
			// parse here the data read from file
			/**********************************************/
			function ParseData(dat)
			{	// convert the read data into an array
				var datlen = dat.length;
				// get sequence length from user
				do { seqlen = prompt("Got "+datlen+" samples.\n\nPlease enter the sequence length:\n1 - for 2 channels\n2 - for 4 channels\n4 - for 8 channels)\n", "2");
				} while ( seqlen!='1' && seqlen!='2' && seqlen!='4' && seqlen!="Cancel");

				seq_len = parseInt(seqlen);
				var ch0 = [];//new Array();
				var ch1 = [];//new Array();
				if ( seq_len>1 ) {
					var ch2 = [];//new Array();
					var ch3 = [];//new Array();
					if ( seq_len>2 ) {
						var ch4 = [];//new Array();
						var ch5 = [];//new Array();
						var ch6 = [];//new Array();
						var ch7 = [];//new Array();
						var arr = [ch0,ch1,ch2,ch3,ch4,ch5,ch6,ch7];
					} else
						var arr = [ch0,ch1,ch2,ch3];//,ch4,ch5,ch6,ch7];
				} else
					var arr = [ch0,ch1];//,ch2,ch3,ch4,ch5,ch6,ch7];
				
				for (j = 0, i = 0; i<datlen; j++) {
					arr[0][j] = dat[i++];
					arr[1][j] = dat[i++];
					if ( seq_len>1 ) {
						arr[2][j] = dat[i++];
						arr[3][j] = dat[i++];
						if ( seq_len>2 ) {
							arr[4][j] = dat[i++];
							arr[5][j] = dat[i++];
							arr[6][j] = dat[i++];
							arr[7][j] = dat[i++];
						}
					}
				}
				alen = arr.length;
				dlen = arr[0].length;
				dindex.end = dlen;
				selection = [0,0,0,0]; xd = -1;
				//alert("array length: " + alen + ", data length: " + dlen);
				data_array = arr;
				// draw the channel selection table
				prepUI();
				// plot data
				GUI_Draw();
			}
			/******************************************************************************/
			function readSingleFile(evt) {
				//Retrieve the first (and only!) File from the FileList object
				var f = evt.target.files[0]; 
				if (f) {
					var r = new FileReader();
					r.onload = function(e) {
						// get sign information from user
						do { data_is_signed = prompt("Please specify if data is signed:\ns - for signed,\nu - for unsigned\n", "s");
						} while ( data_is_signed!='s' && data_is_signed!='u' && data_is_signed!="Cancel");
						// convert the data to 16 bit numbers array
						if ( data_is_signed )
							var dat = new Int16Array(e.target.result);
						else
							var dat = new Uint16Array(e.target.result);
						//alert( "Got the file: \n"+"name: " + f.name + ",\n"+"type: " + f.type + ",\n"+"size: " + f.size + " bytes, " + dat.length + " samples,\n"+"starts with: " + dat[0]);
						ParseData(dat);
					}
					//r.readAsText(f);
					r.readAsArrayBuffer(f);
				} else {
					alert("Failed to load file");
				}
			}
			/**********************************************/
			// display related variables
			/**********************************************/
			var selection = [0,0,0,0];	// coordinates of selected area
			//var data_head;
			var xd = -1;
			var yd = -1;
			var m_up = false;
			var m_down = false;
			// selected data indexes
			var dindex = {start:0, end:dlen};
			var last_coord = {x:0, y:0};
			var canvas1 = document.getElementById("myCanvas");
			var canvas2 = document.getElementById("canvas_2");
			var ctx1 = canvas1.getContext("2d");
			var ctx2 = canvas2.getContext("2d");
			var hei = canvas2.height;
			var wid = canvas2.width;
			var dataURL;
			var img;	// store GUI as img
			/******************************************************************************/
			// display related functions
			/******************************************************************************/
			function prepUI()
			{
				var eltern = canvas1.parentElement;
				if ( document.getElementById("dataForm") )	document.getElementById("dataForm").remove();
				// create channel selection form
				elem = "<div id='dataForm' style='z-index: 3; position:absolute;left:"+(canvasWidth-250)+"px;top:30px;width:220px'></div>";
				eltern.insertAdjacentHTML("BeforeEnd", elem);
				frm = document.getElementById("dataForm");
				elem = "<table style='border:1px solid #A5CFE9' rules='all'><tbody id='dataTable'></tbody></table>";
				frm.insertAdjacentHTML("BeforeEnd", elem);
				dtable = document.getElementById("dataTable");
				elem = "<tr id='tpar' style='background-color: #D5EBF9'><th>Channels</th><th id='d_index'></th></tr>";
				dtable.insertAdjacentHTML("BeforeEnd", elem);
				for (var i=1; i<=alen; i++) {
					elem = "<tr><td onclick='GUI_Draw()'><input type='checkbox' id='checkbox"+i+"' name='channel"+(i-1)+"' checked></input></td></tr>";
					dtable.insertAdjacentHTML("BeforeEnd", elem);	// first column
					var inpId = document.getElementById("checkbox"+i)
					elem = "<label for='checkbox" + i + "' style='color:" + plotColor[i-1] + "'> ch"+(i-1)+"</label>";
					inpId.parentElement.insertAdjacentHTML("BeforeEnd", elem);
					elem = "<td id='myData"+i+"' align='center'></td>";	// second column
					inpId.parentElement.parentElement.insertAdjacentHTML("BeforeEnd", elem);
				}
			}
			/**********************************************/
			function GetCoordinates(e)
			{
				var x = e.clientX-60;	//	var x = e.clientX-30;
				var y = e.clientY-130;
				last_coord.x = x;
				last_coord.y = y;
				// check mouse up or down event
				if ( m_down==true ) {
					m_down = false;
					xd = x; yd = y;
					selection = [x,y,0,0];
				}
				if ( m_up==true ) {
					m_up = false;
					if ( xd>0 && Math.abs(x-selection[0])>25 ) {
						selection[2] = x; selection[3] = y;
						SelectionEnd();
					} else { selection = [0,0,0,0]; xd = -1; GUI_Restore(); }
				}
				return {x,y};
			}
			/**********************************************/
			function ShowCoordinates(e)
			{
				GetCoordinates(e);
				// update GUI
				if (xd>0) {
					GUI_Restore();
					ctx2.strokeRect(selection[0],selection[1],last_coord.x-selection[0],last_coord.y-selection[1]);
				} else
					ShowMarker();
			}
			/**********************************************/
			function ShowMarker()
			{
				if ( selection[2]!=0 || selection[3]!=0 )	return;
				// update channel values
				elem = document.getElementById("d_index");
				// refresh parameter values according to selected coordinate
				if ( elem && last_coord.x>=0 && last_coord.x<=wid ) {
					var d_len = dindex.end - dindex.start;
					var d_spacing = d_len/wid;
					for (var j=0; j<alen; j++) {
						var elemid = document.getElementById("checkbox"+(j+1));
						if ( elemid.checked ) {
							var data_index = dindex.start + Math.floor(last_coord.x*d_spacing);
							document.getElementById("d_index").innerHTML = data_index;
							document.getElementById("myData"+(j+1)).innerHTML =  data_array[j][data_index];
						} else {
							document.getElementById("myData"+(j+1)).innerHTML =  "";
						}
					}
					// display marker
					canvas2.width = canvas2.width;	// reset plot
					if (img)	ctx2.drawImage(img,0,0);	// restore img
					ctx2.beginPath();
					ctx2.moveTo(last_coord.x,0);
					ctx2.lineTo(last_coord.x,hei);
					ctx2.closePath();
					ctx2.stroke();
				}
			}
			/**********************************************/
			function mouse_down(e) {
				m_down = true;
				ShowCoordinates(e);
			}
			/**********************************************/
			function mouse_up(e) {
				m_up = true;
				ShowCoordinates(e);
			}
			/**********************************************/
			function SelectionEnd()
			{
				// draw here the transparent rectangular
				GUI_Restore();
				if ( selection[2]<0 )	selection[2] = 0;
				if ( selection[2]>wid )	selection[2] = wid;
				ctx2.strokeRect(selection[0],selection[1],selection[2]-selection[0],selection[3]-selection[1]);
				xd = -1; yd = -1;
			}
			/**********************************************/
			function ClearSelection() {
				selection = [0,0,0,0];	// clear selection
				GUI_Draw();
			}
			/**********************************************/
			function cnvs_clearCoordinates() {
			}
			/**********************************************/
			function ZoomUpdate() {
				d_len = dindex.end - dindex.start;
				//document.getElementById("dindex_select").innerHTML="dindex start: " + dindex.start + ", end: " + dindex.end;
				//alert("index start: " + dindex.start + ", end: " + dindex.end + ", len: " + d_len);
				GUI_Draw();
				selection = [0,0,0,0];
			}
			/**********************************************/
			function ZoomSelection() {
				if ( selection[0]==0 && selection[2]==0 )	return;
				xmin = Math.min(selection[0],selection[2]);
				xmax = Math.max(selection[0],selection[2]);
				// transpose the GUI selection coordinates to array indexes and amplitude
				var d_len = dindex.end - dindex.start;
				dindex.end = dindex.start + Math.round(xmax*d_len/wid);
				dindex.start = dindex.start + Math.round(xmin*d_len/wid);
				ZoomUpdate();
			}
			/**********************************************/
			function ZoomIn() {
				// transpose the GUI selection coordinates to array indexes and amplitude
				var d_len = dindex.end - dindex.start;
				if ( d_len<100 ) return;  
				dindex.start = dindex.start + Math.round(d_len/4);
				dindex.end = dindex.end - Math.round(d_len/4);
				d_len = dindex.end - dindex.start;
				ZoomUpdate();
			}
			/**********************************************/
			function ZoomOut() {
				//alert("min: " + xmin + ", max: " + xmax);
				// transpose the GUI selection coordinates to array indexes and amplitude
				var d_len = dindex.end - dindex.start;
				dindex.end = dindex.end + Math.round(d_len/2);
				if ( dindex.end>dlen ) dindex.end = dlen;
				dindex.start = dindex.start - Math.round(d_len/2);
				if ( dindex.start<0 ) dindex.start = 0;
				ZoomUpdate();
			}
			/**********************************************/
			function Data_GetRangeY()
			{
				var ymin = ymax = 1;
				for (var j=0; j<alen; j++)
				{
					var chckId = document.getElementById("checkbox"+(j+1));
					if ( chckId && chckId.checked )
					{// plot only checked plots. get min and max values
						for (var i=0; i<dlen; i++)
						{
							var dat = data_array[j][i];	//*1.0;	// make float
							if ( dat<ymin ) ymin = dat;	// get minimum value
							if ( dat>ymax ) ymax = dat;	// get maximum value
						}
					}
				}
				return {ymin,ymax};
			}
			/**********************************************/
			function DrawLabels()
			{
				var d_len = dindex.end - dindex.start;
				var spacH = wid/d_len;
				var posY = canvas2.offsetTop + hei;
				//alert("drawing x labels at posy = " + posY + ", spacH = " + spacH);
				// set horizontal grid step
				var st = Math.floor(d_len/10).toString();
				//alert("d_len = " + d_len + ", st = " + st + ", step = " + step);
				if (st[0]>=5)	step = 5*Math.pow(10,st.length-1);
				else if (st[0]>=2)	step = 2*Math.pow(10,st.length-1);
				else step = Math.pow(10,st.length-1);
				//ctx1.fillStyle = textColor;
				ctx1.fillStyle = "black";
				ctx2.lineWidth = lineWidthG;
				ctx2.strokeStyle = gridColor;
				// horizontal, x-axis
				for(var i=0; i<=d_len; i++) {
					if ( ((dindex.start+i)%step)==0 ) {	// draw only one value each step
						temp = i*spacH;
						ctx1.fillText( Math.floor(dindex.start+i), 30+temp-10, posY+20);	// offset of 30 due to canvas2 left position
						// vertical grids
						ctx2.moveTo(temp,0);
						ctx2.lineTo(temp,hei);
					}
				}
				// vertical, y-axis
				var gr = Data_GetRangeY();
				var totalRange = (gr.ymax-gr.ymin);
				var verticalCoefficient = hei/(totalRange*1.1);
					// vertical grids
					ctx2.moveTo(0,(hei/20));
					ctx2.lineTo(dlen,(hei/20));
					// vertical grids
					ctx2.moveTo(0,(hei/2));
					ctx2.lineTo(dlen,hei/2);
					// vertical grids
					ctx2.moveTo(0,hei - (hei/20));
					ctx2.lineTo(dlen,hei - (hei/20));
/*				var spacingVertical = SPAN*hei/r;	// make vertical steps of 5
				for(var i=0; i<(r/5)+1; i++)
					ctx1.fillText( rangeV[0]+i*SPAN, 10, posY-i*spV);
				//*/
				ctx1.stroke();
				ctx2.stroke();
			}
			/**********************************************/
			function GUI_Draw()
			{
				var dlen = dindex.end - dindex.start;
				var spacingHorizontal = wid/dlen;
				var gr = Data_GetRangeY();
				totalRange = (gr.ymax-gr.ymin);
				var verticalCoefficient = hei/(totalRange*1.1);

				canvas1.width = canvas1.width;	// reset canvas1
				canvas2.width = canvas2.width;	// reset canvas2
				
				DrawLabels();
				//alert("GUI_Draw: dlen: " + dlen);
				for (var j=0; j<alen; j++)
				{
					// actualize the last values in the table
					var ldataId = document.getElementById("myData"+(j+1));
					//alert("DrawLabels: j = "+j);
					ldataId.innerHTML = data_array[j][dindex.end-1];
					// check check-box status
					var elemid = document.getElementById("checkbox"+(j+1));
					mov = elemid.checked;
					if ( mov )	// plot data only if check-box is checked
					{
						//alert("checkbox " + (j+1) + " checked!");
						ctx2.beginPath();
						ctx2.strokeStyle = plotColor[j];
						ctx2.fillStyle = plotColor[j];
						for (var i=0; i<dlen; i++)
						{
							var dat = data_array[j][dindex.start+i];
							if ( dat=='' ) continue;
							//xp = Math.ceil(i*spacingHorizontal);
							var xp = i*spacingHorizontal;
							if (data_is_signed)
								var yp = (hei/2) - (dat*verticalCoefficient);
							else
								var yp = (hei - hei/20) - (dat*verticalCoefficient);
							ctx2.lineTo(xp, yp);
						}
						ctx2.stroke();
						ctx2.closePath();
					}
				}
				dataURL = canvas2.toDataURL();
				img = new Image();
				img.src = dataURL;
			}
			/**********************************************/
			function GUI_Restore()
			{
				canvas2.width = canvas2.width;	// reset plot
				if ( img )	ctx2.drawImage(img,0,0);
			}
			/**********************************************/
		</script>
		</div>
	</body>
</html>
